import { handleApiError } from '@/lib/apiErrorHandler';
import { getApiHeaders } from '@/lib/apiHeaders';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

export interface GuestMessage {
  /** The unique identifier for the message */
  _id: string;
  createdAt: string;
  updatedAt: string;
  /** The currently logged in user Id */
  sentBy: string;
  /** <room_id> for unicast and (undefined or null) for broadcast */
  sentTo: string | undefined;
  /** The title */
  subject: string;
  /** optional description */
  description: string | undefined;
  mediaType?: "image" | "video";
  /** Whether the image is to be placed to the left of description, or on top of the description */
  mediaOrientation?: "vertical" | "horizontal";
  /** media url */
  mediaUrl?: string;
  /** Only defined for action/survey messages */
  questions: {
    /** this will be auto-generated by the backend */
    _id: string;
    /** The question for action/survey */
    question: string;
    /** The options for this question.  */
    options: {
      text: string;
      icon: string | undefined;
    }[];
  }[];
  /** The type of the msg */
  type: "action" | "survey" | "notification";
  /** Some tags */
  tags?: string[];
  /** Whether the message can be deleted */
  deleteable: boolean;
}

export interface GuestMessageResponse {
  status: number;
  payload: {
    documents: GuestMessage[];
    canAccessAllDocuments: boolean;
    pagination: {
      offset: number;
      limit: number;
      total: number;
    };
  };
}

export async function listGuestMessages(params: { 
  limit?: number; 
  offset?: number; 
  filter?: Partial<GuestMessage>; 
  sort?: Record<string, 'asc' | 'desc'> 
}): Promise<GuestMessageResponse> {
  const sortParameter: Record<string, 1 | -1> | undefined = params.sort 
    ? Object.fromEntries(Object.entries(params.sort).map(([k, v]) => [k, v === 'asc' ? 1 : -1])) 
    : undefined;

  const response = await fetch(`${API_BASE_URL}/api/databases/list-documents`, {
    method: 'POST',
    credentials: 'include',
    headers: getApiHeaders(),
    body: JSON.stringify({
      databaseId: "royaltv_main",
      collectionId: "guest_messages",
      limit: params.limit ?? 25,
      offset: params.offset ?? 0,
      ...params.filter,
      $sort: sortParameter
    })
  });

  if (!response.ok) {
    await handleApiError(response);
  }

  return response.json();
}