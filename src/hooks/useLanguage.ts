import { useState, useCallback } from 'react';

export type SupportedLanguage = {
  code: string;
  name: string;
  flag: string;
};

export const SUPPORTED_LANGUAGES: SupportedLanguage[] = [
  { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'en-US', name: 'English (US)', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'fr-FR', name: 'FranÃ§ais (FR)', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' },
  { code: 'es-ES', name: 'EspaÃ±ol (ES)', flag: 'ðŸ‡ªðŸ‡¸' },
  { code: 'es-MX', name: 'EspaÃ±ol (MX)', flag: 'ðŸ‡²ðŸ‡½' },
  { code: 'de', name: 'Deutsch', flag: 'ðŸ‡©ðŸ‡ª' },
  { code: 'de-DE', name: 'Deutsch (DE)', flag: 'ðŸ‡©ðŸ‡ª' },
  { code: 'it', name: 'Italiano', flag: 'ðŸ‡®ðŸ‡¹' },
  { code: 'it-IT', name: 'Italiano (IT)', flag: 'ðŸ‡®ðŸ‡¹' },
  { code: 'pt', name: 'PortuguÃªs', flag: 'ðŸ‡µðŸ‡¹' },
  { code: 'pt-PT', name: 'PortuguÃªs (PT)', flag: 'ðŸ‡µðŸ‡¹' },
  { code: 'ja-JP', name: 'æ—¥æœ¬èªž', flag: 'ðŸ‡¯ðŸ‡µ' },
];

export const useLanguage = () => {
  const [selectedLanguage, setSelectedLanguage] = useState<string>('en');

  const changeLanguage = useCallback((languageCode: string) => {
    setSelectedLanguage(languageCode);
  }, []);

  const getAvailableLanguages = useCallback((items: Array<{ Locale: string }>) => {
    const availableLocales = [...new Set(items.map(item => item.Locale))];
    return SUPPORTED_LANGUAGES.filter(lang => availableLocales.includes(lang.code));
  }, []);

  const getLocalizedContent = useCallback(<T extends { Locale: string; Text: string }>(
    items: T[],
    fallbackLanguage = 'en'
  ): T | null => {
    // Try exact match first
    let content = items.find(item => item.Locale === selectedLanguage);
    
    // Try base language (e.g., 'en' for 'en-US')
    if (!content && selectedLanguage.includes('-')) {
      const baseLanguage = selectedLanguage.split('-')[0];
      content = items.find(item => item.Locale === baseLanguage);
    }
    
    // Try fallback language
    if (!content) {
      content = items.find(item => item.Locale === fallbackLanguage || item.Locale.startsWith(fallbackLanguage));
    }
    
    // Return first available if nothing else works
    return content || items[0] || null;
  }, [selectedLanguage]);

  return {
    selectedLanguage,
    changeLanguage,
    getAvailableLanguages,
    getLocalizedContent,
    supportedLanguages: SUPPORTED_LANGUAGES,
  };
};